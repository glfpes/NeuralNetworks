function [net,testr] = ML_cnn_setting(datainput,label,boundry)
opts.batchSize = 100 ;
opts.numEpochs = 5 ;
f=1/100 ;
net.layers = {} ;
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,4,1,40, 'single'), ...
                           'biases', zeros(1, 40, 'single'), ...
                           'stride', 1, ...
                           'pad', 0,'filterlr',0.00001,'biaslr',0.00001) ;
net.layers{end+1} = struct('type', 'relu') ;
% net.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,40,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 1, ...
                           'pad', 0,'filterlr',0.00001,'biaslr',0.00001) ;
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
                       
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,100,200, 'single'),...
                           'biases', zeros(1,200,'single'), ...
                           'stride', 1, ...
                           'pad', 0,'filterlr',0.00001,'biaslr',0.00001) ;
net.layers{end+1} = struct('type', 'relu') ;
                       
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(1,1,200,2, 'single'),...
                           'biases', zeros(1,2,'single'), ...
                           'stride', 1, ...
                           'pad', 0,'filterlr',0.00001,'biaslr',0.00001) ;

net.layers{end+1} = struct('type', 'softmax') ;

net.layers{end+1} = struct('type', 'loss') ;
net.err=[];net.wrongj=[];
net.rL=[];net.allwrongj=[];
[net,testr]= ML_net_train(net,datainput,label,boundry,opts); 
figure,plot(net.rL);figure,plot(net.allwrongj);
figure,plot(testr.wj);figure,plot(testr.lossf);
